<div id="aggregates" class="container"></div>

<script>
  import type { Account } from "../js/accounts";
  import { toNear } from "../js/utils";
  const container = document.querySelector("#aggregates");

  // cache old accounts to avoid pointless recalculation every render
  let oldAccounts: Account[] = null;

  if (container) {
    window.renderers.push(async function renderAccounts({ accounts }) {
      if (!accounts.length) return;

      // can use simple equality check due to how accounts are cached
      if (oldAccounts === accounts) return;
      oldAccounts = accounts;

      const totals = {
        Locked: 0,
        Claimable: 0,
        "On-hand": 0,
        Staked: 0,
        Unstaked: 0,
        "Grand Total": 0,
      };

      accounts.forEach((account) => {
        totals["Locked"] += account.lockup_info["Locked Amount"];
        totals["Claimable"] += account.lockup_info["Owner's Balance"];
        totals["On-hand"] += toNear(account.native_balance);
        totals["Staked"] += toNear(account.staked_balance);
        totals["Unstaked"] += toNear(account.unstaked_balance);
        totals["Grand Total"] +=
          toNear(account.native_balance) +
          account.lockup_info["Owner's Balance"] +
          account.lockup_info["Locked Amount"] +
          toNear(account.staked_balance) +
          toNear(account.unstaked_balance);
      });

      container.innerHTML = `<p>${Object.entries(totals)
        .map(
          ([label, value]) =>
            `${label}: <span style="float: right">${window.utils.formatLargeNum(value, { convertYocto: false })}</span><br>`,
        )
        .join("")}</p>`;
    });
  }
</script>
